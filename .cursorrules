# .cursorrules
# === Objectif ===
# Fournir un cadre strict pour la documentation, le style, la s√©curit√©,
# l'organisation et les tests afin de garantir un code maintenable et robuste.

rules:

  # ===============================
  # üìñ Bloc 1 : Documentation
  # ===============================
  docs:
    - Chaque fichier doit commencer par un commentaire d√©crivant son r√¥le global.
    - Chaque fonction et m√©thode doit avoir une docstring/documentation standardis√©e.
    - Chaque classe doit expliquer son r√¥le et ses propri√©t√©s principales.
    - Les param√®tres, types de retour et exceptions doivent √™tre syst√©matiquement document√©s.
    - Ne jamais inventer de comportements inexistants.
    - Utiliser le style standard :
      * JSDoc pour JavaScript/TypeScript
      * PHPDoc pour PHP
      * Google Style pour Python

  # ===============================
  # üé® Bloc 2 : Style & Lisibilit√©
  # ===============================
  style:
    - Respecter une indentation coh√©rente (2 ou 4 espaces selon la convention du projet).
    - Ne pas d√©passer 100 caract√®res par ligne (code et commentaires).
    - Utiliser des noms de variables et fonctions explicites (camelCase en JS/TS, snake_case en Python, etc.).
    - √âviter les commentaires superflus qui r√©p√®tent exactement le code.
    - Pr√©f√©rer la lisibilit√© √† l‚Äôoptimisation pr√©matur√©e.

  # ===============================
  # üîí Bloc 3 : S√©curit√©
  # ===============================
  security:
    - Ne jamais laisser de mot de passe, cl√© API ou secret en clair dans le code.
    - Toujours valider et √©chapper les entr√©es utilisateurs.
    - Ne pas utiliser `eval()` ou √©quivalents dangereux.
    - Les requ√™tes SQL doivent √™tre param√©tr√©es pour √©viter les injections.
    - Ne pas exposer d‚Äôinformations sensibles dans les messages d‚Äôerreurs.

  # ===============================
  # ‚ö° Bloc 4 : Performance
  # ===============================
  performance:
    - √âviter les boucles imbriqu√©es inutiles.
    - Utiliser les m√©thodes natives optimis√©es (`map`, `filter`, `reduce`, etc.).
    - Utiliser la pagination pour les r√©cup√©rations volumineuses.
    - Mettre en cache les calculs co√ªteux ou r√©p√©t√©s.
    - Pr√©f√©rer les structures de donn√©es adapt√©es (Set, Map, Dictionary‚Ä¶).

  # ===============================
  # üèóÔ∏è Bloc 5 : Structure & Organisation
  # ===============================
  structure:
    - Un fichier doit avoir une responsabilit√© principale (Single Responsibility Principle).
    - Diviser le code en modules clairs et r√©utilisables.
    - √âviter les fonctions de plus de 50 lignes (les d√©couper).
    - Toujours g√©rer les erreurs (try/catch ou √©quivalent).
    - Suivre le principe DRY (Don't Repeat Yourself) : √©viter la duplication de code.

  # ===============================
  # ‚úÖ Bloc 6 : Tests
  # ===============================
  tests:
    - Chaque fonction critique doit avoir un test unitaire.
    - Les tests doivent couvrir les cas normaux, limites et erreurs.
    - Les noms des tests doivent d√©crire clairement ce qu‚Äôils v√©rifient.
    - Les tests doivent √™tre reproductibles et ind√©pendants entre eux.

  # ===============================
  # üå± Bloc 7 : Git & Collaboration
  # ===============================
  git:
    - Chaque commit doit avoir un message clair et descriptif.
    - Les branches doivent √™tre nomm√©es en fonction de leur objectif (`feature/`, `fix/`, `docs/`, etc.).
    - Ne jamais commit de fichiers temporaires ou d√©pendances externes (`node_modules`, `vendor`, etc.).
    - Toujours lier les commits √† une issue/t√¢che si disponible.